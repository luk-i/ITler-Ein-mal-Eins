<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HELP_SUBNET_CALCULATOR" xml:space="preserve">
    <value>Bitte geben Sie eine gültige IPv4-Adresse in Dezimal-Schreibweise ein.
Beispiel: 192 168 2 21
Die Netzmaske können Sie im selben Format, oder in der Kurzschreibweise eingeben (Bitte nur eine Variante).
Beispiel: 255 255 255 0  oder  24 (im "/"-Feld)

Nach der korrekten Eingabe drücken Sie "Berechnen", oder betätigenn Sie die Enter-Taste. Daraufhin werden die Eingaben gesperrt und der untere Bereich freigegeben.

Geben Sie die gewünschte Subnetz- oder Host-Anzahl an, oder füllen Sie die Subnetzmaske in Dezimal- oder Kurzschreibweise.
Nach einer korrekten Eingabe werden die anderen Ergebnisse automatisch berechnet.

Der rechte Bereich gibt Ihnen weitere Informationen, basierend auf Ihren Eingaben wieder.

Um eine neue IP-Adresse, oder eine neue Netzmaske einzugeben, drücken Sie bitte "Zurücksetzen", oder betätigen Sie erneut die Enter-Taste.</value>
  </data>
  <data name="HELP_UNITC_BITS" xml:space="preserve">
    <value>Erlaubt sind Gleitkommazahlen mit, oder ohne Vorzeichen. Als Dezimaltrennzeichen kann '.' oder ',' benutzt werden. Seperatoren im Vorkommabereich werden nicht akzeptiert.

Füllen Sie genau ein Feld aus und drücken Sie "Berechnen", oder betätigen Sie die Enter-Taste.
Für eine erneute Eingabe drücken Sie bitte "Zurücksetzen", oder betätigen erneut die Enter-Taste.

Hinweis: Es handelt sich um Einheiten im Hauptspeicherbereich, der Faktor zwischen den Tausender-Schritten beträgt daher 1024. 

Beispiele:
-123.4567
+8901
00034,56000
</value>
  </data>
  <data name="HELP_UNITC_SYSTEMS" xml:space="preserve">
    <value>Im kompletten Bereich sind nur Ganzzahlen erlaubt. Vorzeichen sind nur im Feld "Dezimal" erlaubt. 

Erlaubt in "Binär" sind die Zahlen 0 und 1.
Erlaubt in "Oktal" sind die Zahlen 0 bis 7.
Erlaubt in "Dezimal" sind die Zahlen 0 bis 9 mit oder ohne Vorzeichen '-'.
Erlaubt in "Hexadezimal" sind die Zahlen 0 bis 9 und die Zeichen A bis F (Groß- und Kleinschreibung akzeptiert).

Wählen Sie den gewünschten Datentyp aus dem Dropdown-Feld im oberen Bereich. Dies ist notwendig, da negative Zahlen in "Binär", "Oktal" und "Hexadezimal" je nach Datentyp unterschiedlich dargestellt werden, da das MSB (most significant bit) immer links steht.

Füllen Sie genau ein Feld aus und drücken Sie "Berechnen", oder betätigen Sie die Enter-Taste.
Für eine erneute Eingabe drücken Sie bitte "Zurücksetzen", oder betätigen erneut die Enter-Taste.

Beispiel (von oben nach unten):
Int16
1111111111110110
177766
-10
FFF6


</value>
  </data>
</root>